// import abi from "./JSON/BuyMeACoffee.json";
// import { ethers } from "ethers";
// import "./App.css";
// import React, { useEffect, useState } from "react";

// export default function Home() {
//   // Contract Address & ABI
//   const contractAddress = "0x99B9Ccccb1C0f4fcC115C20807e0aaE09aab4f30";
//   const contractABI = abi.abi;

//   // Component state
//   const [currentAccount, setCurrentAccount] = useState("");
//   const [name, setName] = useState("");
//   const [message, setMessage] = useState("");
//   const [memos, setMemos] = useState([]);

//   const onNameChange = (event) => {
//     setName(event.target.value);
//   };

//   const onMessageChange = (event) => {
//     setMessage(event.target.value);
//   };

//   // Wallet connection logic
//   const isWalletConnected = async () => {
//     try {
//       const { ethereum } = window;

//       const accounts = await ethereum.request({ method: "eth_accounts" });
//       console.log("accounts: ", accounts);

//       if (accounts.length > 0) {
//         const account = accounts[0];
//         console.log("wallet is connected! " + account);
//       } else {
//         console.log("make sure MetaMask is connected");
//       }
//     } catch (error) {
//       console.log("error: ", error);
//     }
//   };

//   const connectWallet = async () => {
//     try {
//       const { ethereum } = window;

//       if (!ethereum) {
//         console.log("please install MetaMask");
//       }

//       const accounts = await ethereum.request({
//         method: "eth_requestAccounts",
//       });

//       setCurrentAccount(accounts[0]);
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   const buyCoffee = async () => {
//     try {
//       const { ethereum } = window;

//       if (ethereum) {
//         const provider = new ethers.providers.Web3Provider(ethereum, "any");
//         const signer = provider.getSigner();
//         const buyMeACoffee = new ethers.Contract(
//           contractAddress,
//           contractABI,
//           signer
//         );

//         console.log("buying coffee..");
//         const coffeeTxn = await buyMeACoffee.buyCoffee(
//           name ? name : "anon",
//           message ? message : "Enjoy your coffee!",
//           { value: ethers.utils.parseEther("0.001") }
//         );

//         await coffeeTxn.wait();

//         console.log("mined ", coffeeTxn.hash);

//         console.log("coffee purchased!");

//         // Clear the form fields.
//         setName("");
//         setMessage("");
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   // Function to fetch all memos stored on-chain.
//   const getMemos = async () => {
//     try {
//       const { ethereum } = window;
//       if (ethereum) {
//         const provider = new ethers.providers.Web3Provider(ethereum);
//         const signer = provider.getSigner();
//         const buyMeACoffee = new ethers.Contract(
//           contractAddress,
//           contractABI,
//           signer
//         );

//         console.log("fetching memos from the blockchain..");
//         const memos = await buyMeACoffee.getMemos();
//         console.log("fetched!");
//         setMemos(memos);
//       } else {
//         console.log("Metamask is not connected");
//       }
//     } catch (error) {
//       console.log(error);
//     }
//   };

//   useEffect(() => {
//     let buyMeACoffee;
//     isWalletConnected();
//     getMemos();

//     // Create an event handler function for when someone sends
//     // us a new memo.
//     const onNewMemo = (from, timestamp, name, message) => {
//       console.log("Memo received: ", from, timestamp, name, message);
//       setMemos(
//         (prevState) => [
//           ...prevState,
//           {
//             address: from,
//             timestamp: new Date(timestamp * 1000),
//             message,
//             name,
//           },
//         ],
//         [getMemos]
//       );
//     };

//     const { ethereum } = window;

//     // Listen for new memo events.
//     if (ethereum) {
//       const provider = new ethers.providers.Web3Provider(ethereum, "any");
//       const signer = provider.getSigner();
//       buyMeACoffee = new ethers.Contract(contractAddress, contractABI, signer);

//       buyMeACoffee.on("NewMemo", onNewMemo);
//     }

//     return () => {
//       if (buyMeACoffee) {
//         buyMeACoffee.off("NewMemo", onNewMemo);
//       }
//     };
//   }, [contractABI]);

//   return (
//     <div className="container">
//       <div>
//         <>Buy Code Eater a Chai!</>
//         <meta name="description" content="Tipping site" />
//         <link rel="icon" href="/favicon.ico" />
//       </div>

//       <main className="main">
//         <h1 className="title">Buy Albert a Coffee!</h1>

//         {currentAccount ? (
//           <div>
//             <form>
//               <div class="formgroup">
//                 <label>Name</label>
//                 <br />

//                 <input
//                   id="name"
//                   type="text"
//                   placeholder="anon"
//                   onChange={onNameChange}
//                 />
//               </div>
//               <br />
//               <div class="formgroup">
//                 <label>Send Albert a message</label>
//                 <br />

//                 <textarea
//                   rows={3}
//                   placeholder="Enjoy your coffee!"
//                   id="message"
//                   onChange={onMessageChange}
//                   required
//                 ></textarea>
//               </div>
//               <div>
//                 <button type="button" onClick={buyCoffee}>
//                   Send 1 Coffee for 0.001ETH
//                 </button>
//               </div>
//             </form>
//           </div>
//         ) : (
//           <button onClick={connectWallet}> Connect your wallet </button>
//         )}
//       </main>

//       {currentAccount && <h1>Memos received</h1>}

//       {currentAccount &&
//         memos.map((memo, idx) => {
//           return (
//             <div
//               key={idx}
//               style={{
//                 border: "2px solid",
//                 "border-radius": "5px",
//                 padding: "5px",
//                 margin: "5px",
//               }}
//             >
//               <p style={{ "font-weight": "bold" }}>"{memo.message}"</p>
//               <p>
//                 From: {memo.name} at {memo.timestamp.toString()}
//               </p>
//             </div>
//           );
//         })}

//       <footer className="footer">
//         <a
//           href="https://alchemy.com/?a=roadtoweb3weektwo"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Created by @thatguyintech for Alchemy's Road to Web3 lesson two!
//         </a>
//       </footer>
//     </div>
//   );
// }
import abi from "./JSON/BuyMeACoffee.json";
import { ethers } from "ethers";
import "./App.css";
import React, { useEffect, useState } from "react";

export default function Home() {
  // Contract Address & ABI
  const contractAddress = "0x99B9Ccccb1C0f4fcC115C20807e0aaE09aab4f30";
  const contractABI = abi.abi;
  const { ethereum } = window;
  // Component state
  const [currentAccount, setCurrentAccount] = useState("");
  const [state, setState] = useState({
    provider: null,
    signer: null,
    contract: null,
  });

  const [name, setName] = useState("");
  const [message, setMessage] = useState("");
  const [memos, setMemos] = useState([]);

  const onNameChange = (event) => {
    setName(event.target.value);
  };

  const onMessageChange = (event) => {
    setMessage(event.target.value);
  };

  // Wallet connection logic
  // const isWalletConnected = async () => {
  //   try {
  //     const { ethereum } = window;

  //     const accounts = await ethereum.request({ method: "eth_accounts" });
  //     console.log("accounts: ", accounts);

  //     if (accounts.length > 0) {
  //       const account = accounts[0];
  //       console.log("wallet is connected! " + account);
  //     } else {
  //       console.log("make sure MetaMask is connected");
  //     }
  //   } catch (error) {
  //     console.log("error: ", error);
  //   }
  // };

  useEffect(() => {
    const connectWallet = async () => {
      try {
        const { ethereum } = window;
        if (ethereum) {
          const accounts = await ethereum.request({
            method: "eth_requestAccounts",
          });
          const provider = new ethers.providers.Web3Provider(ethereum, "any");
          const signer = provider.getSigner();
          const contract = new ethers.Contract(
            contractAddress,
            contractABI,
            signer
          );
          //console.log(contract);
          setCurrentAccount(accounts[0]);
          setState({ provider, signer, contract });
          console.log(state);
        }
      } catch (error) {
        console.log(error);
      }
    };
    connectWallet();
  }, [currentAccount]);

  // const buyCoffee = async () => {
  //   try {
  //     const { ethereum } = window;
  //     const { contract } = state;
  //     if (ethereum) {
  //       console.log("buying coffee..");
  //       const coffeeTxn = await contract.buyCoffee(
  //         name ? name : "anon",
  //         message ? message : "Enjoy your coffee!",
  //         { value: ethers.utils.parseEther("0.001") }
  //       );

  //       await coffeeTxn.wait();

  //       console.log("mined ", coffeeTxn.hash);

  //       console.log("coffee purchased!");

  //       // Clear the form fields.
  //       setName("");
  //       setMessage("");
  //     }
  //   } catch (error) {
  //     console.log(error);
  //   }
  // };

  // Function to fetch all memos stored on-chain.
  // const getMemos = async () => {
  //   try {
  //     const { ethereum } = window;
  //     if (ethereum) {
  //       const { contract } = state;

  //       console.log("fetching memos from the blockchain..");
  //       const memos = await contract.getMemos();
  //       console.log("fetched!");
  //       setMemos(memos);
  //     } else {
  //       console.log("Metamask is not connected");
  //     }
  //   } catch (error) {
  //     console.log(error);
  //   }
  // };

  // useEffect(() => {
  //   let { contract } = state;
  //   isWalletConnected();
  //   getMemos();
  //   const onNewMemo = (from, timestamp, name, message) => {
  //     console.log("Memo received: ", from, timestamp, name, message);
  //     setMemos(
  //       (prevState) => [
  //         ...prevState,
  //         {
  //           address: from,
  //           timestamp: new Date(timestamp * 1000),
  //           message,
  //           name,
  //         },
  //       ],
  //       [getMemos]
  //     );
  //   };
  //   const { ethereum } = window;
  //   if (ethereum) {
  //     contract.on("NewMemo", onNewMemo);
  //   }
  //   return () => {
  //     if (contract) {
  //       contract.off("NewMemo", onNewMemo);
  //     }
  //   };
  // }, [contractABI, state]);

  return (
    <div className="container">
      <div>Hi</div>
      {/* <div>
        <>Buy Code Eater a Chai!</>
        <meta name="description" content="Tipping site" />
        <link rel="icon" href="/favicon.ico" />
      </div>

      <main className="main">
        <h1 className="title">Buy Albert a Coffee!</h1>

        {currentAccount ? (
          <div>
            <form>
              <div class="formgroup">
                <label>Name</label>
                <br />

                <input
                  id="name"
                  type="text"
                  placeholder="anon"
                  onChange={onNameChange}
                />
              </div>
              <br />
              <div class="formgroup">
                <label>Send Albert a message</label>
                <br />

                <textarea
                  rows={3}
                  placeholder="Enjoy your coffee!"
                  id="message"
                  onChange={onMessageChange}
                  required
                ></textarea>
              </div>
              <div>
                <button type="button" onClick={buyCoffee}>
                  Send 1 Coffee for 0.001ETH
                </button>
              </div>
            </form>
          </div>
        ) : (
          <button onClick={connectWallet}> Connect your wallet </button>
        )}
      </main>

      {currentAccount && <h1>Memos received</h1>}

      {currentAccount &&
        memos.map((memo, idx) => {
          return (
            <div
              key={idx}
              style={{
                border: "2px solid",
                "border-radius": "5px",
                padding: "5px",
                margin: "5px",
              }}
            >
              <p style={{ "font-weight": "bold" }}>"{memo.message}"</p>
              <p>
                From: {memo.name} at {memo.timestamp.toString()}
              </p>
            </div>
          );
        })} */}
    </div>
  );
}
